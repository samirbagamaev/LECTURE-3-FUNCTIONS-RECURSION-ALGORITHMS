# ФУНКЦИИ

# Функция — это фрагмент программы, используемый многократно.
# Мы знакомы уже с функциями с C#, давайте теперь посмотрим, как
# создаются и используются функции внутри Python

# def function_name(x):
 # body line 1
 # ...
 # body line n
 # optional return


#..............................................................................

# Задача
# Необходимо создать функцию sumNumbers(n), которая будет
# считать сумму всех элементов от 1 до n.

# Решение:

# 1. Необходимо создать функцию:
# def sumNumbers(n):
# Очень важно понимать одну вещь, сколько аргументов мы передаем,
# столько и принимаем. Или наоборот сколько аргументов мы
# принимаем, столько и передаем.
# В нашем случае функция sumNumbers принимает 1 аргумент(n).
# принимает 1 аргумент(n).

# def sumNumbers(n):
#  summa = 0
#  for i in range(1, n + 1): # так как подсчет начинается с 1 
#   summa += i
#  print(summa)
# sumNumbers(5) #ОТВЕТ 15

#..............................................................................

# Программный код, который мы написали прекрасно справляется с
# поставленной задачей. Давайте изменим наш код и добавим в него
# return. НО перед этим давайте вспомним, что делает return:

# 1. Завершает работу функции
# 2. Возвращает значение

# def sumNumbers(n):
#  summa = 0
#  for i in range(1, n + 1):
#   summa += i
#  return summa
# n = int(input('ВВЕДИТЕ ЧИСЛО: ')) # 5
# print('ОТВЕТ: ' , sumNumbers(n)) # 15

#..............................................................................

#ДЛЯ ПЕРЕДАЧИ НЕОГРАНИЧЕННОГО КОЛИЧЕСТВА ЭЛЕМЕНТОВ

# def sum_str(*args): #*args может передавать неограниченное кол-ство аргументов
#  res = ''
#  for i in args:
#   res += i
#  return res
 
# print(sum_str('q', 'e', '1')) #ОТВЕТ: qe1
# print(sum_str('q', 'e', '1', 'r', 'f')) #ОТВЕТ: qe1rf



#################################################################################


#МОДУЛЬНОСТЬ

# Вы когда-нибудь задавались вопрос, как например работает функция .append
# Это же точно такая же функция, как и sumNumbers(n), но мы ее нигде не создаем,
# все дело в том что, это функция автоматически срабатывает и чтобы ей
# пользоваться ничего дополнительно писать не надо.
# Представьте себе такую ситуацию, что Вы создаете огромный проект и у Вас
# имеется большое количество функций, к примеру 5 функций работают со
# словарями, 18 со списками и тд. и у каждой функции свой алгоритм, но их
# объединяет работа с одной коллекцией данных. Согласитесь неудобно работать в
# таком большом файле, где около 80 функций, очень легко потеряться и на
# перемотку кода Вы будете терять драгоценное время. Решение данной проблемы
# есть. Давайте будем создавать отдельные файлы, где будут находиться только
# функции, и эти функции при необходимости вызывать из главного файла.



